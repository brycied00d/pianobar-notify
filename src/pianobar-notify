#!/usr/bin/perl 

use common::sense;

# {{{ POD

=head1 AUTHOR

(c) 2010 Juan C. Muller E<lt>jcmuller@gmail.comE<gt>. All rights reserved.

=head1 DESCRIPTION

Get the data from L<pianobar|http://github.com/jcmuller/pianobar> and display a
notification window using Desktop::Notify.

=head1 VERSION

v0.1

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

=head1 USAGE

pianobar-notify [options]

    -m, --man       Show man page
    -h, --help      Show this text

=cut

# }}}

# {{{ Defaults Class
package Defaults;

# {{{ base_path
sub base_path
{
	my $base_path = "${ENV{HOME}}/.covers";
	return $base_path;
}
# }}}
# }}}

# {{{ PianoBarNotify Class
package PianoBarNotify;

# {{{ Libraries
use Desktop::Notify;
use Getopt::Long;
use LWP::Simple qw(get);
use Pod::Usage;
use feature 'switch';
# }}}
# {{{ new
# Common constructor
sub new
{
	my ($proto, %args) = @_;
	my $class = ref $proto || $proto;
	my $self = {};
	bless $self, $class;
	$self->_initialize(%args);
	return $self;
}
# }}}
# {{{ notify
sub notify
{
	my ($self) = @_;

	# Declare cache vars

	my (
		$album,
		$artist,
		$cover,
		$rating,
		$station_name,
		$status,
		$title
	) = $self->_get_status;

	if ($artist and $title)
	{
		$self->_display(
			album        => $album,
			artist       => $artist,
			cover        => $cover,
			rating       => $rating,
			station_name => $station_name,
			status       => $status,
			title        => $title,
		);

		$self->{notification}->close;
	}
}
# }}}
# {{{ _initialize
sub _initialize
{
	my ($self, %args) = @_;

	$self->_collect_arguments;

	# Open a connection to the notification daemon
	my $notify = Desktop::Notify->new;

	# Create notification object
	$self->{notification} = $notify->create(timeout  => 5000);
}
# }}}
# {{{ _display
sub _display
{
	my ($self, %body_args) = @_;

	# Set notification summary line
	$self->{notification}->summary("Pianobar - [$body_args{status}]");

	# Construct notification body text
	my $body = $self->_get_body(%body_args);
	my $icon = $self->_get_album_cover($body_args{artist}, $body_args{album}, $body_args{cover});

	$self->{notification}->app_icon($icon);
	$self->{notification}->body($body);

	# Display the notification
	$self->{notification}->show;
}
# }}}
# {{{ _collect_arguments
sub _collect_arguments
{
	my ($self) = @_;

	my %arguments;

	GetOptions(\%arguments,
		'help',
		'man',
	);

	$self->{arguments} = \%arguments;

	if ($self->{arguments}{help})
	{
		pod2usage(1);
	}
	elsif ($self->{arguments}{man})
	{
		pod2usage(-verbose => 2);
	}
}
# }}}
# {{{ _get_status
sub _get_status
{
	my ($self) = @_;

	# Query it
	my $artist       = '';
	my $title        = '';
	my $album        = '';
	my $cover        = '';
	my $station_name = '';
	my $status       = '';
	my $rating       = '';

	my $action = shift @ARGV;

	# Cache the status object
	if ($action =~ /song(?:start|explain|love|ban)/)
	{
		while (<STDIN>)
		{
			$artist = $1 if (/artist=(.+)$/);
			$title  = $1 if (/title=(.+)$/);
			$album  = $1 if (/album=(.+)$/);
			$cover  = $1 if (/coverArt=(.+)$/);
			$rating = $1 if (/rating=(.+)$/);

			$station_name  = $1 if (/stationName=(.+)$/);

			given ($action)
			{
				when (/start|explain/) { $status = 'playing' }
				when (/love/)          { $status = 'Thumbs Up' }
				when (/ban/)           { $status = 'Thumbs Down' }
			}
		}
	}

	return
		$album,
		$artist,
		$cover,
		$rating,
		$station_name,
		$status,
		$title;
}
# }}}
# {{{ _get_album_cover
sub _get_album_cover
{
	my ($self, $artist, $album, $cover) = @_;

	my $BASE_PATH = Defaults->base_path;

	my @image_types = qw(png jpg gif tif bmp);

	# Create convers directory if it doesn't exist.
	mkdir $BASE_PATH if (! -d $BASE_PATH);

	# Construct filename based on the current artist and album playing
	my $base_filename = "$BASE_PATH/${artist}_${album}";

	# Check for the existence of a file
	for my $extension (@image_types)
	{
		my $filename = "${base_filename}.${extension}";

		if ( -e $filename and ! -z $filename)
		{
			return $filename;
		}
	}

	if ($cover)
	{
		my $icon = get($cover);

		my $filename = $base_filename;

		if ($cover =~ /.*(\.\w{3})$/)
		{
			$filename .= "$1";
		}

		if ($icon)
		{
			if (my $fh = FileHandle->new("> $filename" ))
			{
				$fh->print($icon);
				$fh->close;

				return $filename;
			}
		}
	}

	# Otherwise, use a default image
	my $icon = "$BASE_PATH/default.png";
	return $icon;
}
# }}}
# {{{ _get_body
# Get the notification body contents. It is in its own method so that it can be
# overridden. For that to happen, the architecture of this program would need
# to change slightly. Not a lot.
sub _get_body
{
	my ($this, %args) = @_;

	my $rat = $args{rating} ? 'Thumbs Up' : '';

	return << "FINI";
$args{artist} - $args{title}
$args{album}
On: $args{station_name}
<i>$rat</i>
FINI
}
# }}}
# }}}

# {{{ main
package Main;

sub main
{
	PianoBarNotify->new->notify;
}

main();
# }}}

# vim:set foldmethod=marker noexpandtab sw=4 ts=4:
